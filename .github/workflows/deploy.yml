name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Build App
        run: npm run build

  dockerize:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nextjs-app:latest

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Deploy to server
  #       run: |
  #         ssh user@your-server "
  #           # Stop and remove old container if it exists
  #           docker ps -q --filter 'ancestor=funning-nextjs-app' | xargs -r docker stop | xargs -r docker rm;
            
  #           # Remove old image locally to free space
  #           docker images 'funning-nextjs-app' -q | xargs -r docker rmi;
            
  #           # Pull new image and run new container
  #           docker pull funning-nextjs-app:$GITHUB_SHA;
  #           docker run -d --name funning-nextjs-app-container funning-nextjs-app:$GITHUB_SHA
  #         "
          
  #     - name: Remove old image from Docker Hub (optional)
  #       run: |
  #         docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
  #         # List all images and delete old ones from Docker Hub
  #         # Here you should customize logic to identify old images based on your tagging scheme
  #         # Example: Deleting images older than the current image
  #         docker image ls --filter 'dangling=true' -q | xargs -r docker rmi
